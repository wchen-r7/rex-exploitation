# -*- coding:binary -*-
require 'spec_helper'

require 'rex/exploitation/cmdstager'

RSpec.describe Rex::Exploitation::CmdStagerEcho do

  let(:exe) { "MZAAAAAAAA" }

  subject(:cmd_stager) do
    described_class.new(exe)
  end

  describe '#cmd_concat_operator' do
    it "returns ;" do
      expect(cmd_stager.cmd_concat_operator).to eq(" ; ")
    end
  end

  describe '#generate' do
    it "returns an array of commands" do
      result = cmd_stager.generate
      expect(result).to be_kind_of(Array)
      expect(result).to_not be_empty
    end
  end

  describe '#generate_linemax_64' do
    it "returns an array of commands, split to 64 byte chunks" do
      result = cmd_stager.generate(linemax: 64)
      expect(result).to be_kind_of(Array)
      expect(result).to_not be_empty
      expect(result.size).to be > 1
    end
  end

  describe '#generate_hex_double_quoted_linemax_32' do
    it "returns an array of commands, double quoted, split to 32 byte chunks" do
      result = cmd_stager.generate(linemax: 32,
                                   enc_format: :hex_double_quoted)
      expect(result).to be_kind_of(Array)
      expect(result).to_not be_empty
      expect(result.size).to be > 1
      expect(result[1].size).to be <= 32
      # This is pretty specific to my starting exe value up there.
      expect(result[1]).to start_with('echo -en "\x41\x41">>/tmp/')
    end
  end

  describe '#generate_hex_single_quoted_linemax_32' do
    it "returns an array of commands, single quoted, split to 32 byte chunks" do
      result = cmd_stager.generate(linemax: 32,
                                   enc_format: :hex_single_quoted)
      expect(result).to be_kind_of(Array)
      expect(result).to_not be_empty
      expect(result.size).to be > 1
      expect(result[1].size).to be <= 32
      # This is pretty specific to my starting exe value up there.
      expect(result[1]).to start_with("echo -en '\\x41\\x41'>>/tmp/")
    end
  end

end
